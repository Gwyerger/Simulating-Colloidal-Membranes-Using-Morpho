// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import moviemaker
import vtk
import functionals


// Theoretical Parameters

// var Ksplay = 1
// var Kbend = 1
// var Ktwist = 1
var K = 1
var C = 2
var q = 1
var gam = 0.5
var ff = 0.3

// Region Dimensions

var dx = 0.2
var Rreg = 6
var Rp = 0.5

// Import/Export Destination

var pathexport = "/mnt/c/Users/gabey/OneDrive/Desktop/Fall 2023/SM Research/Phase Diagram VTK Exports and PP/Circle Pore/VTK Files"
var pathenergies = "/mnt/c/Users/gabey/OneDrive/Desktop/Fall 2023/SM Research/Phase Diagram VTK Exports and PP/Circle Pore/Energy over iterations"
var initialmeshpath = "/mnt/c/Users/gabey/OneDrive/Desktop/Fall 2023/SM Research/Phase Diagram VTK Exports and PP/Circle Pore/VTK Files"

// --------------------------------------------------


fn modulus(a, b){
    return (a/b - floor(a/b))*b
}

fn CreateSelections(mesh, Rregion, Rpore, Grain) {
    var dx = Grain
    var bnds = Selection(mesh, boundary=true)
    bnds.addgrade(0)
    bnds.addgrade(1)
    whole = Selection(mesh, true)
    outerbnd = Selection(mesh, fn (x y z) sqrt(x^2 + y^2) > Rpore + dx).intersection(bnds)
    innerbnd = Selection(mesh, fn (x y z) sqrt(x^2 + y^2) < Rpore + dx).intersection(bnds)    
    outerbnd.addgrade(0)
    innerbnd.addgrade(0)
    outerbnd.addgrade(1)
    innerbnd.addgrade(1)
    
    return [bnds, whole, innerbnd, outerbnd]
}

fn EnergiesToFile(path, str, sopt, fopt) {
    var sonum = Matrix(sopt.energy).dimensions()[0]-1
    var fonum = Matrix(fopt.energy).dimensions()[0]-1
    var fs = File("${path}/${str}sopt.txt", "w")
    for (i in 0..sonum) fs.write("${sopt.energy[i]}")
    var ff = File("${path}/${str}fopt.txt", "w")
    for (i in 0..fonum) ff.write("${fopt.energy[i]}")
    fs.close()
    ff.close()
}

fn ListToFile(str, list){
    var f = File("${pathexport}/${str}.txt", "w")
    for (dat in list) f.write(dat)
    f.close()
}


 // //Initialize a field
fn AddNematicFieldEnergy(mesh, problem, Lregion, Hregion, Ksplay, Ktwist, Kbend, q, C) {
    var K = Ktwist
    var nn = Field(mesh, fn(x,y,z) Matrix([0,0,1])) 
    var nem = Nematic(nn, ksplay = Ksplay, ktwist = Ktwist, kbend = Kbend, pitch = q)
    problem.addenergy(nem)
    return [nn, nem]
}

// For restricting the X-component locally
class XCompSquared {
    init(vec) {
        self.vec = vec
    }
    integrand(vec) {
        var int = vec.op(fn (x) x[0]^2)
        return int.linearize().transpose()
    }

    fieldgradient(vec, mesh) {
        // print vec
        var fg = vec.op(fn (x) Matrix([2*x[0], 0, 0]))
        return fg
    }

    total(vec) {
        return self.integrand(vec).sum()
    }  
}

// Add a tilt energy functional C/2*sin^2(theta)
fn tIntegrand(x, n) {                   
    return (1-(n[2])^2)
}

fn AddTiltEnergy(problem, nn, C) {
    var tilt = AreaIntegral(tIntegrand, nn) 
    problem.addenergy(tilt, prefactor = C/2)
}

// Add a line tension functional
fn lIntegrand(x){
    return (1)
}
fn AddEdgeEnergy(problem, sel, g) {
    var lten = LineIntegral(lIntegrand)
    problem.addenergy(lten, selection=sel, prefactor = g)
}

fn AddPressure(problem, f) {
    problem.addenergy(Area(), prefactor=(-f))
}

fn AddConstraints(problem, reg,  UpperWall, LowerWall, LeftWall, RightWall, nn) {
    // Add a level set to keep things in the z axis
    var lcons = ScalarPotential(fn (x,y,z) z)    
    problem.addlocalconstraint(lcons)
    reg.addlocalconstraint(lcons)   

    // Add constraints to keep the pore from turning inside out (not working yet)


    // // Fully restrict nx
    // var lxcs=XCompSquared(nn)
    // problem.addlocalconstraint(lxcs, field=nn, target=0)


    // Add a functional to penalize nx
    // var xcon = LineIntegral(fn (x, n) n[0]^2, nn)
    // problem.addenergy(xcon, selection = UpperWall, prefactor = 100)
    // problem.addenergy(xcon, selection = LowerWall, prefactor = 100)

    // Unit vector constraint 
    var lnorm = NormSq(nn)                      
    problem.addlocalconstraint(lnorm, field=nn, target=1) 
}

fn CreateOptimizers(problem, reg,  mesh, LeftWall, RightWall, UpperWall, LowerWall, porebnd, nn) {

    // Create the field optimizer
    var fopt = FieldOptimizer(problem, nn)
    fopt.stepsize = 0.01
    fopt.fix()
    fopt.fix()
    fopt.fix()
    fopt.fix()
    fopt.quiet = true
    fopt.etol = 1e-5
    var sopt = ShapeOptimizer(problem, mesh)   

    sopt.quiet = true
    sopt.stepsize = 0.001
    sopt.steplimit = 0.01
    sopt.etol = 1e-5
    sopt.fix()
    sopt.fix()
    sopt.fix()
    sopt.fix()
    
    var leq = EquiElement()                     // Try to equalize elements
    reg.addenergy(leq, prefactor = 1)         

    var ropt = ShapeOptimizer(reg, mesh)
    ropt.stepsize = 0.001
    ropt.steplimit = 0.005
    ropt.fix(porebnd)
    ropt.fix(RightWall)
    ropt.fix(LeftWall)
    ropt.fix(UpperWall)
    ropt.fix(LowerWall)
    ropt.quiet=true

    return [fopt, sopt, ropt, reg]
}

fn Optimization(str, mesh, nn, porebnd, ropt, fopt, sopt) {
    var iterations = 500
    var vtkE = VTKExporter(nn)
    var h = 0
    vtkE.export("${pathexport}/${str}_${h}.vtk")
    var Break = false
    var A = Area()
    for (i in 0..iterations) {
        if (A.total(mesh) > Lreg*Hreg){break}
        if (i < 200){
 
            fopt.conjugategradient(3)
            sopt.conjugategradient(3)
            if (Int(modulus(i, 3))==0) {
                ropt.conjugategradient(3)
                if (i < 100) {
                    equiangulate(mesh, quiet=true)
                    ropt.conjugategradient(3)
                }
            }
            if (Int(modulus(i, 5))==0) {
                h=h+1
                vtkE.export("${pathexport}/${str}_${h}.vtk")
            }
        }        
        else {
            fopt.linesearch(5)
            sopt.linesearch(5)
            if (sopt.hasconverged() && fopt.hasconverged()) {
                break
            }
            
            if (Int(modulus(i, 5))==0) {
                h=h+1
                vtkE.export("${pathexport}/${str}_${h}.vtk")
            }
        }
        var sonum = Matrix(sopt.energy).dimensions()[0]-1
        var fonum = Matrix(fopt.energy).dimensions()[0]-1

        if(abs(sopt.energy[sonum]) > abs(sopt.energy[0]*100) or abs(fopt.energy[fonum]) > abs(fopt.energy[0]*100)) {
            print("Mesh Degradation")
            break
        }
        // print("sopt step: ${sopt.energy[sonum]-sopt.energy[sonum-1]}, fopt step: ${fopt.energy[fonum]-fopt.energy[fonum-1]}")
    }
}


fn Refinement(str, mesh, nn, porebnd, LeftWall, RightWall, UpperWall, LowerWall, problem, reg, sopt, fopt, ropt, Nlevels) {
    var vtkE = VTKExporter(nn)
    /* Refinement */
    for (level in 1..Nlevels) {
        var mr = MeshRefiner([mesh, nn, porebnd, LeftWall, RightWall, UpperWall, LowerWall])
        var refmap = mr.refine()

        // Now refinement is done update the problems and optimizers
        for (el in [problem, reg, sopt, fopt, ropt]) el.update(refmap)

        // Update our references 
        mesh = refmap[mesh]   // There are tidier ways to do this!
        nn = refmap[nn]
        porebnd = refmap[porebnd]
        LeftWall = refmap[LeftWall]
        RightWall = refmap[RightWall]
        UpperWall = refmap[UpperWall]
        LowerWall = refmap[LowerWall]
        // Continue optimizing. We don't need further regularization for this particular problem
        for (i in 1..5) {                  
            sopt.conjugategradient(10)
            fopt.conjugategradient(10)
            if (sopt.hasconverged() && fopt.hasconverged()) break 
        }
        vtkE.export(String(str, "Refined",level,".vtk"))
    }
}

var vtkMI = VTKImporter(String(initialmeshpath,"/SinglePoreMeshInitial.vtk"))
var mesh = vtkMI.mesh()
var Selections = CreateSelections(mesh, Lreg, Hreg, Rp, dx)
var LeftWall = Selections[0], RightWall = Selections[1], UpperWall = Selections[2], LowerWall = Selections[3], bnds = Selections[4], porebnd = Selections[5]
var problem = OptimizationProblem(mesh)
var reg = OptimizationProblem(mesh) 
var fe = AddNematicFieldEnergy(mesh, problem, Lreg, Hreg, K, K, K, q, C)
var nn = fe[0], nem = fe[1]
AddTiltEnergy(problem, nn, C)
AddEdgeEnergy(problem, porebnd, gam)
AddPressure(problem, ff)
AddConstraints(problem, reg, UpperWall, LowerWall, LeftWall, RightWall, nn)
var Optimizers = CreateOptimizers(problem, reg, mesh, LeftWall, RightWall, UpperWall, LowerWall, porebnd, nn)
var fopt = Optimizers[0], sopt = Optimizers[1], ropt = Optimizers[2]
var str = "SinglePoreg${gam}f${ff}q${q}C${C}"
Optimization(str, mesh, nn, porebnd, ropt, fopt, sopt)
Show(plotmesh(mesh, grade = [0,1,2]))
EnergiesToFile(pathenergies, "EnergiesItg${gam}f${ff}q${q}C${C}", sopt, fopt)


