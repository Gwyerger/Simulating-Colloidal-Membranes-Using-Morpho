import meshgen
import meshtools
import plot
import optimize
import moviemaker
import vtk
import functionals

var path = "/mnt/c/Users/gabey/OneDrive/Desktop/Fall 2023/SM Research/Scherk Surface/"


fn CreateAndSaveMesh(Grain, Lx, Ly, Lz){
    // Create Domains
    // var right = HalfSpaceDomain(Matrix([Lx/2, 0, 0]), Matrix([1, 0, 0]))
    // var left = HalfSpaceDomain(Matrix([-Lx/2, 0, 0]), Matrix([1, 0, 0]))
    // var up = HalfSpaceDomain(Matrix([0, Ly/2, 0]), Matrix([0, -1, 0]))
    // var down = HalfSpaceDomain(Matrix([0, -Ly/2, 0]), Matrix([0, 1, 0]))
    // var front = HalfSpaceDomain(Matrix([0, 0, Lz/2]), Matrix([0, 0, -1]))
    // var back = HalfSpaceDomain(Matrix([0, 0, -Lz/2]), Matrix([0, 0, 1]))
    // var rectprism = ((((right.difference(left)).difference(up)).difference(down)).difference(front)).difference(back)
    // var cylinder = Domain(fn (x) -((x[0])^2+(x[1])^2-2))
    // var dom = rectprism.difference(cylinder)
    // // Create Mesh
    // var mg = MeshGen(dom, [-Lx/2..Lx/2:Grain, -Ly/2..Ly/2:Grain, -Lz/2..Lz/2:Grain], method = "StartRandom")
    // mg.ctol = 1e-9
    // var mesh = mg.build()
    // var vtkME = VTKExporter(mesh)
    // vtkME.export("${path}ScherkInitial.vtk")
    
    var vtkMI = VTKImporter("${path}ScherkInitial.vtk")
    var mesh = vtkMI.mesh()
    var vtkME = VTKExporter(mesh)

    mesh.addgrade(1)
    mesh.addgrade(2)
    mesh.addgrade(3)

    var bnds = Selection(mesh, boundary = true)
    bnds.addgrade(1)
    bnds.addgrade(2)
    var xends = bnds.intersection(Selection(mesh, fn (x,y,z) abs(x) >= Lx/2 - Grain/2))
    var yends = bnds.intersection(Selection(mesh, fn (x,y,z) abs(y) >= Ly/2 - Grain/2))
    xends.addgrade(1)
    xends.addgrade(2)
    yends.addgrade(1)
    yends.addgrade(2)

    var problem = OptimizationProblem(mesh)
    var la = Area()
    problem.addenergy(la, selection = bnds, prefactor = 1)
    var lv = Volume()
    problem.addconstraint(lv)
    var mopt = ShapeOptimizer(problem, mesh)
    mopt.fix(xends)
    mopt.fix(yends)
    mopt.stepsize = 0.001
    mopt.steplimit = 0.01

    var reg = OptimizationProblem(mesh)
    var leq=EquiElement()
    reg.addenergy(leq)
    reg.addconstraint(lv)
    var ropt = ShapeOptimizer(reg, mesh)
    ropt.fix(xends)
    ropt.fix(yends)
    ropt.stepsize = 0.001
    ropt.steplimit = 0.01
// Use Optimization to find the minimal surface
    var h = 0
    vtkME.export("${path}Scherk${h}.vtk")
    
    for (i in 0..50) {
    mopt.linesearch(10)
    ropt.linesearch(5)
    equiangulate(mesh)
    h=h+1
    vtkME.export("${path}Scherk${h}.vtk")
    }
    for (i in 0..50) {
    mopt.linesearch(10)
    h=h+1
    vtkME.export("${path}Scherk${h}.vtk")
    }

    var selections = [bnds, xends, yends]
    return [mesh, selections]
}

 // //Initialize a field
fn AddNematicFieldEnergy(mesh, problem, Lx, Ksplay, Ktwist, Kbend, q, C) {
    var K = Ktwist
    var nn = Field(mesh, fn(x,y,z) Matrix([0,sin(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lx/2*sqrt(C/K))),cos(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lx/2*sqrt(C/K)))])) 
    var nem = Nematic(nn, ksplay = Ksplay, ktwist = Ktwist, kbend = Kbend, pitch = q)
    problem.addenergy(nem)
    return [nn, nem]
}

// Add a tilt energy functional C/2*sin^2(theta)
fn tIntegrand(x, n) {                   
    return (1-(n[2])^2)
}

fn AddTiltEnergy(problem, nn, C) {
    var tilt = VolumeIntegral(tIntegrand, nn) 
    problem.addenergy(tilt, prefactor = C/2)
}

fn CreateOptimizers(problem, mesh, XWalls, YWalls,  nn) {
    // Create the field optimizer
    var fopt = FieldOptimizer(problem, nn)
    fopt.stepsize = 0.01
    fopt.fix(XWalls)
    fopt.fix(YWalls)
    fopt.quiet = true
    fopt.etol = 1e-5
    return fopt
}

fn Optimization(str, mesh, fopt, nn) {
    print(String("Optimizing mesh and exporting with batch name ", str))
    var iterations = 100
    var vtkE = VTKExporter(nn)
    for (i in 0..iterations) {
        vtkE.export("${str}_${i}.vtk")
        fopt.conjugategradient(1)
    }
}
var grain = 0.4
var Lx = 12
var Ly = 6
var Lz = 3
var K = 1
var C = 1
var q = 1

var meshing = CreateAndSaveMesh(grain, Lx, Ly, Lz)

var Mesh = meshing[0]
var Sels = meshing[1]
var bnds = Sels[0]
var xends = Sels[1]
var yends = Sels[2]

var problem = OptimizationProblem(Mesh)

var nemfield = AddNematicFieldEnergy(Mesh, problem, Lx, K, K, K, q, C)[0]

var lnorm = NormSq(nemfield)  

problem.addlocalconstraint(lnorm, field=nemfield, target=1) 

AddTiltEnergy(problem, nemfield, C)

var fopt = CreateOptimizers(problem, Mesh, xends, yends, nemfield)

Optimization("${path}ScherkMeshfixedy", Mesh, fopt, nemfield)

