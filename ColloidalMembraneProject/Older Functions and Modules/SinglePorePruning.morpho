import meshgen
import meshtools
import plot
import optimize
import moviemaker
import vtk
import functionals


var K = 1
var C = 1
var q = 0
var Hreg = 4
var Lreg = 12
var Rp = 0.5
var gam = 0.5
var dx = 0.2

// Helper functions to visualize the director field 
fn visdirector(m, n, scale) {
    var g = Graphics() 
    for (id in 0...m.count()) {
        var x = m.vertexposition(id)        // Get vertex id's position 
        var xx = Matrix([x[0], x[1], 0])    // Promote it to a 3D vector 
        var nn =n[0,id]                     // Get the corresponding director 
        g.display(Cylinder(xx-scale*nn, xx+scale*nn, aspectratio=0.2, color=White)) 
    }
    return g
} 
fn visdirectorselected(m, n, s, scale) {
    var g = Graphics() 
    var points = s.idlistforgrade(0)
    for (id in points) {
        var x = m.vertexposition(id)        // Get vertex id's position 
        var xx = Matrix([x[0], x[1], 0])    // Promote it to a 3D vector 
        var nn =n[0,id]                     // Get the corresponding director 
        g.display(Cylinder(xx-scale*nn, xx+scale*nn, aspectratio=0.2, color=White)) 
    }
    return g
} 
fn visverticalselected(n, nz, s) {
    var points = s.idlistforgrade(0)
    for (id in points) {
        nz[0,id] =n[0,id]         // Get the corresponding director  
    }
    return 
} 
fn Matrix_Morpho2Mathematica(data,str) {
    if (ismatrix(data)){
        print(String("\n",str," = "))
        var size = data.dimensions()
        print("{")
        for (i in 0..size[0]-1){
            if(i>0){print(",")}
            print("{")
            for (j in 0..size[1]-1){
                if(j>0){print(",")}
                print(String(data[i,j]))
                }
            print("}")
            }
        print("}\n")
        }
    return 
}
fn FieldOnLine(m, s, n, start, end, numpts) {
    var N = m.count(0)
    var pts = []
    var ValueMatrix = Matrix(numpts+1,2)
    for (id in 0..N-1) {
        pts.append(m.vertexposition(id))
    }
    var kpts = KDTree(pts)
    var step = (end-start)/numpts
    for (i in 0..numpts) {
        var pt = kpts.nearest(Matrix([i*step + start, 0,0]))
        var nvalue = 0
        var Ptpos = 0
            for (id in 0..N-1) {
                if (pts[id] == pt.location && s.isselected(0, id)) {
                    nvalue = n[0,id].inner(Matrix([0,0,1]))
                    Ptpos = pts[id].inner(Matrix([1,0,0]))
                    break
                }
            }
        ValueMatrix[i,0] = (Ptpos); ValueMatrix[i,1] =  acos(nvalue)
    }
    return ValueMatrix
}

// Create Mesh

//if (Rp > 0)

    var Rfixed = 0.5
    var hs0 = HalfSpaceDomain(Matrix([0,Hreg]), Matrix([0,1]))
    var hs1 = hs0.difference(HalfSpaceDomain(Matrix([0,Hreg/2]), Matrix([0,-1])))
    var hs2 = hs1.difference(HalfSpaceDomain(Matrix([0,-Hreg/2]), Matrix([0,1])))
    var hs3 = hs2.difference(HalfSpaceDomain(Matrix([Lreg/2,0]), Matrix([-1,0])))
    var rect = hs3.difference(HalfSpaceDomain(Matrix([-Lreg/2,0]), Matrix([1,0])))
    var pore = CircularDomain(Matrix([0,0]), Rfixed)
    var dom = rect.difference(pore)
    var mg = MeshGen(dom, [-Lreg/2..Lreg/2:dx, -Hreg/2..Hreg/2+0.01:dx], quiet=true)
    var meshe = mg.build()
    var mesh = ChangeMeshDimension(meshe, 3)
    mesh.addgrade(1)
    mesh.addgrade(2)
    var vtkME = VTKExporter(mesh)
    vtkME.export(String("StartingMesh.vtk"))

//if (Rp = 0) 
    // var hs0 = HalfSpaceDomain(Matrix([0,Hreg]), Matrix([0,1]))
    // var hs1 = hs0.difference(HalfSpaceDomain(Matrix([0,Hreg/2]), Matrix([0,-1])))
    // var hs2 = hs1.difference(HalfSpaceDomain(Matrix([0,-Hreg/2]), Matrix([0,1])))
    // var hs3 = hs2.difference(HalfSpaceDomain(Matrix([Lreg/2,0]), Matrix([-1,0])))
    // var rect = hs3.difference(HalfSpaceDomain(Matrix([-Lreg/2,0]), Matrix([1,0])))
    // var pore = CircularDomain(Matrix([0,0]), Rp)
    // var dom = rect.difference(pore)
    // var mg = MeshGen(dom, [-Lreg/2..Lreg/2:dx, -Hreg/2..Hreg/2+0.01:dx], quiet=true)
    // var meshe = mg.build()
    // var mesh = ChangeMeshDimension(meshe, 3)
    // mesh.addgrade(1)
    // mesh.addgrade(2)
    // var vtkME = VTKExporter(mesh)
    // vtkME.export(String("PoreEqNewV0.vtk"))

// Create Selections

var memb = Selection(mesh, fn(x,y,z) abs(x)<=Lreg/2+dx and abs(y)<=Hreg/2+dx)
var LeftWallReg = Selection(mesh, fn(x,y,z) x <= -Lreg/2 + dx)
var RightWallReg = Selection(mesh, fn(x,y,z) x >= Lreg/2 - dx)
var LowerWallReg = Selection(mesh, fn(x,y,z) y <= -Hreg/2 + dx)
var UpperWallReg = Selection(mesh, fn(x,y,z) y >= Hreg/2 - dx)
var bnds = Selection(mesh, boundary=true)
bnds.addgrade(0)
LeftWallReg.addgrade(0)
RightWallReg.addgrade(0)
LowerWallReg.addgrade(0)
UpperWallReg.addgrade(0)
var inner = Selection(mesh, fn(x,y,z) abs(x)<Lreg/2-dx and abs(y)<Hreg/2-dx)
var porebnd = bnds.intersection(inner)
var LeftWall = bnds.intersection(LeftWallReg)
var RightWall = bnds.intersection(RightWallReg)
var LowerWall = bnds.intersection(LowerWallReg)
var UpperWall = bnds.intersection(UpperWallReg)
var notporebnd = Selection(mesh, fn(x,y,z) sqrt(x^2 + y^2) > Rp+0.5*dx)
porebnd.addgrade(1)
memb.addgrade(1)
memb.addgrade(2)
bnds.addgrade(1)
LeftWall.addgrade(1)
RightWall.addgrade(1)
UpperWall.addgrade(1)
LowerWall.addgrade(1)

// Initialize problem(s)
var problem=OptimizationProblem(mesh)
var reg=OptimizationProblem(mesh)

 // //Initialize a field

var nn = Field(mesh, fn(x,y,z) Matrix([0,sin(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lreg/2*sqrt(C/K))),cos(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lreg/2*sqrt(C/K)))])) 
var nem = Nematic(nn, ksplay = K, ktwist = K, kbend = K, pitch = q)
problem.addenergy(nem, selection = memb)

// Add a tilt energy functional C/2*sin^2(theta)

fn tIntegrand(x, n) {                   
    return C/2*(1-(n[2])^2)
}
var tilt = AreaIntegral(tIntegrand, nn) 
problem.addenergy(tilt, selection = memb)

// Add a line tension functional
fn lIntegrand(x){
    return (gam)
}
var lten = LineIntegral(lIntegrand)
problem.addenergy(lten, selection=porebnd)

//Add Constraints and Boundary Conditions

fn Bound(x, n) {
    return (1-(n[2])^2)
}
var lcons = ScalarPotential(fn (x,y,z) z)    

// Add a level set to keep things in the z axis
problem.addlocalconstraint(lcons)

// Add a functional to penalize nx
var xcon = LineIntegral(fn (x, n) n[0]^2, nn)
problem.addenergy(xcon, selection = UpperWall, prefactor = 1)
problem.addenergy(xcon, selection = LowerWall, prefactor = 1)

// Add a boundary condition
var bndry = LineIntegral(Bound, nn)
problem.addenergy(bndry, selection=LeftWall)
problem.addenergy(bndry, selection=RightWall)

// Unit vector constraint 
var lnorm = NormSq(nn)                      
problem.addlocalconstraint(lnorm, field=nn, target=1) 

// Area constraint
var A = Area()
problem.addconstraint(A)

// Add a constraint on the  edge of the boundary to keep the shape of the regularized region a rectangle: We must use a separate problem to fix the shape of the region iteratively

var xRcon = ScalarPotential(fn (x,y,z) abs(x - Lreg/2)^2 )
var yUcon = ScalarPotential(fn (x,y,z) abs(y - Hreg/2)^2 )
var xLcon = ScalarPotential(fn (x,y,z) abs(x + Lreg/2)^2 )
var yDcon = ScalarPotential(fn (x,y,z) abs(y + Hreg/2)^2 )
reg.addenergy(xLcon, selection=LeftWall, prefactor = 100)
reg.addenergy(xRcon, selection=RightWall, prefactor = 100)
reg.addenergy(yUcon, selection=UpperWall, prefactor = 100)
reg.addenergy(yDcon, selection=LowerWall, prefactor = 100)
reg.addconstraint(A)

var leq = EquiElement()                     // Try to equalize elements
reg.addenergy(leq, prefactor = 1)
reg.addlocalconstraint(lcons)               // Also respect the level set constraint

// Create Optimizers

// Create the field optimizer
var fopt = FieldOptimizer(problem, nn)
fopt.stepsize = 0.01
fopt.fix(RightWall)
fopt.fix(LeftWall)
fopt.quiet = true
// Create the shape optimizer
var sopt = ShapeOptimizer(problem, mesh)   

sopt.stepsize = 0.001
sopt.steplimit = 0.1
sopt.quiet = true
// sopt.fix(RightWall)
// sopt.fix(LeftWall)
// sopt.fix(UpperWall)
// sopt.fix(LowerWall)

// Create the regularizer 
var ropt = ShapeOptimizer(reg, mesh)
ropt.stepsize = 0.01
ropt.steplimit = 0.1
ropt.fix(porebnd)
ropt.quiet=true

// Time to Optimize
for(ii in 0..2) {
var vtkE = VTKExporter(nn)
var AM = Area()
var ArM = AM.total(mesh)
for (i in ii*10..ii*10+10) {

    // Export VTK
    vtkE.export("PoreEqNewV${i}.vtk")
    
    fopt.conjugategradient(15)
    sopt.linesearch(10)

    //Conserve The Area
    var AE = AreaEnclosed()
    var ArE = AE.total(mesh, porebnd)
    var ArT = ArE + ArM
    Hreg = sqrt(ArT/3)
    Lreg = 3*Hreg
    equiangulate(mesh)
    ropt.conjugategradient(3)
}

// Show(plotmesh(mesh, grade=[0,1,2]))
// Refining and Pruning

fopt.unfix(RightWall)
fopt.unfix(LeftWall)
ropt.unfix(porebnd)



var LF = Length()
var Lelm = LF.integrand(mesh)
// Refining
var Lthres = (2*dx)
var Rbnds = Selection(mesh, boundary=true)
Rbnds.addgrade(0)
var Rinner = Selection(mesh, fn(x,y,z) abs(x)<Lreg/2-dx and abs(y)<Hreg/2-dx)
var poreRegion = bnds.intersection(Rinner)
poreRegion.addgrade(1)
for (id in poreRegion.idlistforgrade(1)) {
    if (Lelm[0,id] < Lthres) {
        poreRegion[1,id] = false
    }
}
// Show(plotselection(mesh,poreRegion, grade = [0,1]))
var mr = MeshRefiner([mesh, nn, LeftWall, RightWall, UpperWall, LowerWall])
var refmap = mr.refine(selection = poreRegion)

for (el in [problem, reg, sopt, fopt, ropt]) el.update(refmap)
// Update our references 
mesh = refmap[mesh]  
nn = refmap[nn]
var memb = Selection(mesh, fn(x,y,z) abs(x)<=Lreg/2+dx and abs(y)<=Hreg/2+dx)
LeftWall = refmap[LeftWall]
RightWall = refmap[RightWall]
UpperWall = refmap[UpperWall]
LowerWall = refmap[LowerWall]
var bnds = Selection(mesh, boundary=true)
bnds.addgrade(0)
var inner = Selection(mesh, fn(x,y,z) abs(x)<Lreg/2-dx and abs(y)<Hreg/2-dx)
var porebnd = bnds.intersection(inner)


// Pruning
var Lthres = (dx/4)
var Rbnds = Selection(mesh, boundary=true)
Rbnds.addgrade(0)
var Rinner = Selection(mesh, fn(x,y,z) abs(x)<Lreg/2-dx and abs(y)<Hreg/2-dx)
var poreRegion = bnds.intersection(Rinner)
poreRegion.addgrade(1)
for (id in poreRegion.idlistforgrade(1)) {
    if (Lelm[0,id] > Lthres) {
        poreRegion[1,id] = false
    }
}

//Make the mesh pruner
// Show(plotselection(mesh,poreRegion, grade = [0,1]))

var mp = MeshPruner([mesh, nn, LeftWall, RightWall, UpperWall, LowerWall])
var refmap = mp.prune(poreRegion)

// Now pruning is done update the problems and optimizers
for (el in [problem, reg, sopt, fopt, ropt]) el.update(refmap)
// Update our references 
mesh = refmap[mesh]  
nn = refmap[nn]
var memb = Selection(mesh, fn(x,y,z) abs(x)<=Lreg/2+dx and abs(y)<=Hreg/2+dx)
LeftWall = refmap[LeftWall]
RightWall = refmap[RightWall]
UpperWall = refmap[UpperWall]
LowerWall = refmap[LowerWall]
var bnds = Selection(mesh, boundary=true)
bnds.addgrade(0)
var inner = Selection(mesh, fn(x,y,z) abs(x)<Lreg/2-dx and abs(y)<Hreg/2-dx)
var porebnd = bnds.intersection(inner)
porebnd.addgrade(1)
fopt.fix(RightWall)
fopt.fix(LeftWall)

Show(plotselection(mesh, porebnd, grade=[0,1,2]))
}
