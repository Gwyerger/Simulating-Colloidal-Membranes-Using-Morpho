// Here I try to model the expulsion of twist in a colloidal membrane 
// where the area is fixed and the free energy functionals include:
//   K( (∇.n)^2 + (n.∇xn - q)^2 + (nx∇xn)^2 ) + C( 1-(n.z)^2 )

import meshgen
import meshtools
import plot
import optimize
import moviemaker

var K = 1
var C = 1.5
var lambda = 4
var wavevector = 2*Pi/lambda
var gpar = 1.25
var gper = 1.5


// Defining a circular domain (Isotropic Fluid) with a smaller circular selection space (Colloidal Membrane)
var Wreg = 2
var Hreg = 2
var Wmem = 0.8
var Hmem = 0.8

var mesh = AreaMesh(fn (u,v) [u,v,0], -Wreg..Wreg:0.2, -Hreg..Hreg:0.2)

var col = Selection(mesh, fn(x,y,z) abs(x) <= Wmem + 0.01 && abs(y) <= Hmem + 0.01 && abs(x + y) < 2*Wmem - 0.01)
var bnd = Selection(mesh, fn(x,y,z) abs(x) <= Wmem + 0.01 && abs(y) <= Hmem + 0.01 && (abs(x) >= Wmem - 0.01 || abs(y) >= Hmem - 0.01) && abs(x + y) < 2*Wmem - 0.01)
var inner = Selection(mesh, fn(x,y,z) abs(x) <= Wmem - 0.01 && abs(y) <= Hmem - 0.01 && abs(x + y) < 2*Wmem - 0.01)

mesh.addgrade(1)

col.addgrade(0)
col.addgrade(1)
col.addgrade(2)

bnd.addgrade(0)
bnd.addgrade(1)

inner.addgrade(0)
inner.addgrade(1)
inner.addgrade(2)
/*
Show(plotselection(mesh, col, grade = [0,1]))
Show(plotselection(mesh, bnd, grade = [0,1]))
Show(plotselection(mesh, inner, grade = [0,1]))
*/
//Initialize a random field with positive z component
var nn = Field(mesh, fn(x,y,z) Matrix([0,0,1]))  

// Helper functions to visualize the director field 
fn visdirector(m, n, scale) {
    var g = Graphics() 
    for (id in 0...m.count()) {
        var x = m.vertexposition(id)        // Get vertex id's position 
        var xx = Matrix([x[0], x[1], 0])    // Promote it to a 3D vector 
        var nn =n[0,id]                     // Get the corresponding director 
        g.display(Cylinder(xx-scale*nn, xx+scale*nn, aspectratio=0.2, color=White)) 
    }
    return g
} 
fn visdirectorselected(m, n, s, scale) {
    var g = Graphics() 
    var points = s.idlistforgrade(0)
    for (id in points) {
        var x = m.vertexposition(id)        // Get vertex id's position 
        var xx = Matrix([x[0], x[1], 0])    // Promote it to a 3D vector 
        var nn =n[0,id]                     // Get the corresponding director 
        g.display(Cylinder(xx-scale*nn, xx+scale*nn, aspectratio=0.2, color=White)) 
             
    }
    return g
} 

 // Create an OptimizationProblem with our mesh as the target
var problem=OptimizationProblem(mesh) 

 // Add an Area functional as a global constraint
var larea = Area()                                         
problem.addconstraint(larea, selection = col) 



// Add a nematic energy functional 
var nem = Nematic(nn, ksplay = K, ktwist = K, kbend = K, pitch = wavevector)
problem.addenergy(nem, selection = col) 

// Add a tilt energy functional
fn tIntegrand(x, n) {                   
    return 1-(n[2])^2
}
var tilt = AreaIntegral(tIntegrand, nn) // Tilt term due to smectic order as an inner product
problem.addenergy(tilt, selection = col, prefactor = C/2)

// Add a level set to keep things in the z axis
var lcons = ScalarPotential(fn (x,y,z) 100*z)                     
problem.addlocalconstraint(lcons, selection=col) 

// Add a line tension functional
fn lIntegrand(x, n) {
    var t = tangent()
    var lp = (t.inner(n))^2
    var lt  = 1-lp
    return (gpar*lp + gper*lt)
}
var lten = LineIntegral(lIntegrand, nn)

problem.addenergy(lten, selection=bnd)


// Unit vector constraint 
var lnorm = NormSq(nn)                      
problem.addlocalconstraint(lnorm, field=nn, target=1) 


// Create the field optimizer
var fopt = FieldOptimizer(problem, nn)
fopt.stepsize = 0.01
// Create the shape optimizer
var sopt = ShapeOptimizer(problem, mesh)   
sopt.stepsize = 0.01
/* Part 5: Regularization */
var reg=OptimizationProblem(mesh)           // Create the Auxiliary regularization problem

var leq = EquiElement()                     // Try to equalize elements
reg.addenergy(leq)
reg.addlocalconstraint(lcons, selection=col) // Also respect the level set constraint

var ropt = ShapeOptimizer(reg, mesh)        // We use a separate regularization optimizer
ropt.stepsize = 0.001
ropt.fix(bnd)

var bopt = ShapeOptimizer(reg, mesh)
bopt.stepsize = 0.001
bopt.fix(inner)

for (i in 0...20) {
    print(String("field optimizer ",i))
    fopt.relax(10)
    print(String("shape optimizer ",i))
    sopt.relax(10)
    ropt.relax(5)
    bopt.relax(5)
    equiangulate(mesh)
}

var Nlevels = 1
/* Part 6: Refinement */
for (level in 1..Nlevels) {
    var mr = MeshRefiner([mesh, nn, col, bnd, inner])
    var refmap = mr.refine()

    // Now refinement is done update the problems and optimizers
    for (el in [problem, reg, sopt, fopt, ropt, bopt]) el.update(refmap)

    // Update our references 
    mesh = refmap[mesh]   // There are tidier ways to do this!
    nn = refmap[nn]
    bnd = refmap[bnd]
    col = refmap[col]
    inner = refmap[inner]

    // Continue optimizing. We don't need further regularization for this particular problem
    for (i in 1..10) {                  
        sopt.conjugategradient(10)
        fopt.conjugategradient(10)
        if (sopt.hasconverged() && fopt.hasconverged()) break 
    }
}

col.addgrade(1)
// Visualize 
Show(plotselection(mesh, col, grade = 1)+visdirectorselected(mesh, nn, col, 0.05))

var nvert = Field(mesh, fn(x,y,z) Matrix([0,0,0])) // extract vertical component, plot as density

fn visverticalselected(n, nz, s) {
    var points = s.idlistforgrade(0)
    for (id in points) {
        nz[0,id] =n[0,id]         // Get the corresponding director  
    }
    return 
} 

visverticalselected(nn, nvert, col)
nvert = nvert.op(fn (n) abs(n[2]))


Show(plotfield(nvert, style="interpolate")) 