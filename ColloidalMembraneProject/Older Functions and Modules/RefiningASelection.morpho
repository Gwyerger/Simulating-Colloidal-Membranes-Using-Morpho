import meshgen
import meshtools
import plot
import optimize
import moviemaker
import vtk
import functionals

var Rout = 1.5
var Rin = 0.5
var dx = 0.1
var C = 1
var K = 1
var q = 10

//Visualize Function

fn Visualization(mesh, sel, nn, nem, xcomp, ycomp, zcomp, director, energydensity) {
    
    if (xcomp==true){
        var nx = Field(mesh, fn(x,y,z) Matrix([0,0,0])) // extract x component, plot as density
        visverticalselected(nn, nx, sel)
        nx = nx.op(fn (n) abs(n[0]))
        Show(plotfield(nx, style="interpolate")) 
    }

    if (ycomp==true){
        var ny = Field(mesh, fn(x,y,z) Matrix([0,0,0])) // extract x component, plot as density 
        visverticalselected(nn, ny, sel)
        ny = ny.op(fn (n) abs(n[1]))
        Show(plotfield(ny, style="interpolate")) 
    }

    if (zcomp==true){
        var nz = Field(mesh, fn(x,y,z) Matrix([0,0,0])) // extract z component, plot as density
        visverticalselected(nn, nz, sel)
        nz = nz.op(fn (n) abs(n[2]))
        Show(plotfield(nz, style="interpolate")) 
    }

    if (director==true){
        Show(plotmesh(mesh, grade = [0,1])+visdirector(mesh, nn, 0.05) )
    }
    if (energydensity==true){
        var NemEnDen = nem.integrand(mesh)
        var NemEnDenField = Field(mesh,grade = 2)
        for (i in 0...mesh.count(2)) {
            NemEnDenField[2,i] = NemEnDen[0,i]
        }
        Show(plotfield(NemEnDenField))
    }
}
fn visverticalselected(n, nz, s) {
    var points = s.idlistforgrade(0)
    for (id in points) {
        nz[0,id] =n[0,id]         // Get the corresponding director  
    }
    return 
} 
fn visdirector(m, n, scale) {
    var g = Graphics() 
    for (id in 0...m.count()) {
        var x = m.vertexposition(id)        // Get vertex id's position 
        var xx = Matrix([x[0], x[1], 0])    // Promote it to a 3D vector 
        var nn =n[0,id]                     // Get the corresponding director 
        g.display(Cylinder(xx-scale*nn, xx+scale*nn, aspectratio=0.2, color=White)) 
    }
    return g
} 

var CircleA = CircularDomain(Matrix([0,0]), Rout)
var CircleB = CircularDomain(Matrix([0,0]), Rin)
var CCircles = CircleA.difference(CircleB)
var MG = MeshGen(CCircles, [-Rout..Rout:dx, -Rout..Rout:dx], quiet = false)
var Meshe = MG.build()
var Mesh = ChangeMeshDimension(Meshe, 3)
Mesh.addgrade(1)
Mesh.addgrade(2)
// Show(plotmesh(Mesh, grade = [0,1,2]))

var bndry = Selection(Mesh, boundary = true)
bndry.addgrade(0)
bndry.addgrade(1)
bndry.addgrade(2)
Show(plotselection(Mesh, bndry, grade = [0, 1, 2]))

var nn = Field(Mesh, fn(x,y,z) Matrix([0,sin(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Rout*sqrt(C/K))),cos(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Rout*sqrt(C/K)))])) 
var nem = Nematic(nn, ksplay = K, ktwist = K, kbend = K, pitch = q)

var problem = OptimizationProblem(Mesh)
problem.addenergy(nem)
var lnorm = NormSq(nn)                      
problem.addlocalconstraint(lnorm, field=nn, target=1) 
var fopt = FieldOptimizer(problem, nn)




Visualization(Mesh, bndry, nn, nem, false, false, false, true, false )

fn RefineSelection(Mesh, problem, nn) {
    //Defining a selection:
    /* 
    In the context of my project, I will be using selective refinement when a pore has grown in size, on elements where line curvature is high on the pore boundary,
    and selective pruning when the pore has shrunken in size, on elements with areas less than a threshold.
    */
    var Sel = Selection(Mesh)
    Sel[1, 20] = true

    var mp = MeshRefiner([Mesh, Sel, problem, nn])
    var refmap = mp.refine(selection = Sel)
    problem.update(refmap)
    fopt.update(refmap)
    return [refmap[Mesh], refmap[nn]]
}
var ref = RefineSelection(Mesh,problem, nn)
Mesh = ref[0]
nn = ref[1]
var bndry = Selection(Mesh, boundary = true)
bndry.addgrade(0)
bndry.addgrade(1)
bndry.addgrade(2)

fopt.conjugategradient(50)


Visualization(Mesh, bndry, nn, nem, false, false, false, true, false )

