// Here I try to model the expulsion of twist in a colloidal membrane 
// where the area is fixed and the free energy functionals include:
//   K( (∇.n)^2 + (n.∇xn - q)^2 + (nx∇xn)^2 ) + C( 1-(n.z)^2 )

import meshgen
import meshtools
import kdtree
import plot
import optimize
import moviemaker
import constants
import functionals
import vtk

var K = 1
var C = 25
var lambda = sqrt(K/C)
var q = 0.75/lambda
var gamma = 1
var R = 1

// Units are in 10s of microns
var dom = CircularDomain(Matrix([0,0]), R)
var mg = MeshGen(dom, [-R..R:0.05, -R..R:0.05], quiet=false)
var mesh = mg.build()
var mesh = ChangeMeshDimension(mesh, 3)
var col = Selection(mesh, fn (x,y,z) sqrt(x^2 + y^2) < R + 0.01)
var bnd = Selection(mesh, boundary=true)
var inner = Selection(mesh, fn (x,y,z) sqrt(x^2 + y^2) < R - 0.01)

mesh.addgrade(1)
mesh.addgrade(2)
col.addgrade(0)
col.addgrade(1)
col.addgrade(2)

bnd.addgrade(0)
bnd.addgrade(1)

inner.addgrade(0)
inner.addgrade(1)
inner.addgrade(2)

// Show(plotselection(mesh, col, grade = [0,1]))
// Show(plotselection(mesh, bnd, grade = [0,1]))
// Show(plotselection(mesh, inner, grade = [0,1]))



//Initialize a random field with positive z component
// var nn = Field(mesh, fn(x,y,z) Matrix([0,0,1])) 
var nn = Field(mesh, fn(x,y,z) Matrix([(0.5-random()),(0.5-random()),(0.5 + 0.5*random())]))  


// Helper functions to visualize the director field 
fn visdirector(m, n, scale) {
    var g = Graphics() 
    for (id in 0...m.count()) {
        var x = m.vertexposition(id)        // Get vertex id's position 
        var xx = Matrix([x[0], x[1], 0])    // Promote it to a 3D vector 
        var nn =n[0,id]                     // Get the corresponding director 
        g.display(Cylinder(xx-scale*nn, xx+scale*nn, aspectratio=0.2, color=White)) 
    }
    return g
} 
fn visdirectorselected(m, n, s, scale) {
    var g = Graphics() 
    var points = s.idlistforgrade(0)
    for (id in points) {
        var x = m.vertexposition(id)        // Get vertex id's position 
        var xx = Matrix([x[0], x[1], 0])    // Promote it to a 3D vector 
        var nn =n[0,id]                     // Get the corresponding director 
        g.display(Cylinder(xx-scale*nn, xx+scale*nn, aspectratio=0.2, color=White)) 
             
    }
    return g
} 

fn Matrix_Morpho2Mathematica(data,str) {
    if (ismatrix(data)){
        print(String("\n",str," = "))
        var size = data.dimensions()
        print("{")
        for (i in 0..size[0]-1){
            if(i>0){print(",")}
            print("{")
            for (j in 0..size[1]-1){
                if(j>0){print(",")}
                print(String(data[i,j]))
                }
            print("}")
            }
        print("}\n")
        }
    return 
}

 // Create an OptimizationProblem with our mesh as the target
var problem=OptimizationProblem(mesh) 

 // Add an Area functional as a global constraint
var larea = Area()                                         
problem.addconstraint(larea, selection = col) 

// Add a nematic energy functional 
var nem = Nematic(nn, ksplay = K, ktwist = K, kbend = K, pitch = q)
problem.addenergy(nem, selection = col) 

// Add a tilt energy functional
fn tIntegrand(x, n) {                   
    return 1-(n[2])^2
}
var tilt = AreaIntegral(tIntegrand, nn) // Tilt term due to smectic order as an inner product
problem.addenergy(tilt, selection = col, prefactor = C/2)

// Add a level set to keep things in the z axis
var lcons = ScalarPotential(fn (x,y,z) z)                     
problem.addlocalconstraint(lcons, selection=col) 

// Add a line tension functional
fn lIntegrand(x) {
    return (gamma)
}
var lten = LineIntegral(lIntegrand)

problem.addenergy(lten, selection=bnd)


// Unit vector constraint 
var lnorm = NormSq(nn)                      
problem.addlocalconstraint(lnorm, field=nn, target=1) 


// Create the field optimizer
var fopt = FieldOptimizer(problem, nn)
fopt.stepsize = 0.01
// Create the shape optimizer
var sopt = ShapeOptimizer(problem, mesh)   
sopt.stepsize = 0.01
/* Part 5: Regularization */
var reg=OptimizationProblem(mesh)           // Create the Auxiliary regularization problem

var leq = EquiElement()                     // Try to equalize elements
reg.addenergy(leq)
reg.addlocalconstraint(lcons, selection=col) // Also respect the level set constraint

var ropt = ShapeOptimizer(reg, mesh)        // We use a separate regularization optimizer
ropt.stepsize = 0.001
ropt.fix(bnd)

var bopt = ShapeOptimizer(reg, mesh)
bopt.stepsize = 0.001
bopt.fix(inner)

var str = "CollMemb"

var vtkE = VTKExporter(nn)
    vtkE.export(String(str,"#0.vtk"))

    for (i in 0...31) {
        fopt.relax(2)
        fopt.conjugategradient(2)
        vtkE.export(String(str,"#",i+1,".vtk"))
    }

var Nlevels = 0
/* Part 6: Refinement */
for (level in 1..Nlevels) {
    var mr = MeshRefiner([mesh, nn, col, bnd, inner])
    var refmap = mr.refine()

    // Now refinement is done update the problems and optimizers
    for (el in [problem, reg, sopt, fopt, ropt, bopt]) el.update(refmap)

    // Update our references 
    mesh = refmap[mesh]   // There are tidier ways to do this!
    nn = refmap[nn]
    bnd = refmap[bnd]
    col = refmap[col]
    inner = refmap[inner]

    // Continue optimizing. We don't need further regularization for this particular problem
    for (i in 1..10) {                  
        sopt.conjugategradient(10)
        fopt.conjugategradient(10)
        if (sopt.hasconverged() && fopt.hasconverged()) break 
    }
}

col.addgrade(1)
// Visualize 
Show(plotselection(mesh, bnd, grade = 1)+visdirectorselected(mesh, nn, col, 0.05))

var nvert = Field(mesh, fn(x,y,z) Matrix([0,0,0])) // extract vertical component, plot as density

fn visverticalselected(n, nz, s) {
    var points = s.idlistforgrade(0)
    for (id in points) {
        nz[0,id] =n[0,id]         // Get the corresponding director  
    }
    return 
} 

visverticalselected(nn, nvert, col)
nvert = nvert.op(fn (n) abs(n[0])^2+abs(n[1])^2)

fn FindOuterXBound(m, s) {
    var points = s.idlistforgrade(0)
    var i = 0
    var sct = s.count(0)
    var x = Matrix(sct,1)
    for (id in points) {
        x[i] = m.vertexposition(id)[0]
        i=i+1
    }
    return max(x)
}

fn PLengthScaleBar() {
    var lambda = sqrt(K/C)
    var X = FindOuterXBound(mesh,col)
    var g = Graphics()
    g.display(Cylinder(Matrix([X,0,0]), Matrix([X-lambda,0,0]), aspectratio = 0.2))
    return g
}

fn GeneralScaleBar() {
    var len = 0.5
    var X = FindOuterXBound(mesh, col)
    var g = Graphics()
    g.display(Cylinder(Matrix([X,-R+len,0]), Matrix([X-len,-R+len,0]), aspectratio = 0.2))
    return g
}

fn FieldOnLine(m, s, n, start, end, numpts) {
    var N = m.count(0)
    var pts = []
    var ValueMatrix = Matrix(numpts+1,2)
    for (id in 0..N-1) {
        pts.append(m.vertexposition(id))
    }
    var kpts = KDTree(pts)
    var step = (end-start)/numpts
    for (i in 0..numpts) {
        var pt = kpts.nearest(Matrix([i*step + start, 0,0]))
        var nzvalue = 0
        var Ptpos = 0
            for (id in 0..N-1) {
                if (pts[id] == pt.location && s.isselected(0, id)) {
                    nzvalue = n[0,id].inner(Matrix([0,0,1]))
                    Ptpos = pts[id].inner(Matrix([1,0,0]))
                    break
                }
            }
        ValueMatrix[i,0] = (end - Ptpos)/sqrt(K/C); ValueMatrix[i,1] =  acos(nzvalue)
    }
    return ValueMatrix
}


Show(plotfield(nvert, style="interpolate", cmin = 0, cmax = 1)+PLengthScaleBar()) 

